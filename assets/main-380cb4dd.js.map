{"version":3,"file":"main-380cb4dd.js","sources":["../../src/main.ts"],"sourcesContent":["/// <reference types=\"@workadventure/iframe-api-typings\" />\n\nimport { TileDescriptor } from \"@workadventure/iframe-api-typings\";\n\nconsole.log('Script started successfully');\n\n// Define the initial state of the grid (it contains a glider pattern)\nlet grid: number[][] = [\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n];\n\n// Waiting for the API to be ready\nWA.onInit().then(() => {\n    console.log('Scripting API ready');\n\n    renderGrid();\n}).catch(e => console.error(e));\n\n// Function to update the grid based on the rules of Conway's Game of Life\nfunction applyRules(): void {\n    const newGrid: number[][] = [];\n    for (let y = 0; y < grid.length; y++) {\n        const newRow: number[] = [];\n        for (let x = 0; x < grid[0].length; x++) {\n            const neighbors = countNeighbors(x, y);\n            // Apply Conway's rules\n            if (grid[y][x] === 1 && (neighbors < 2 || neighbors > 3)) {\n                newRow.push(0); // Any live cell with fewer than two live neighbors dies, as if by underpopulation\n            } else if (grid[y][x] === 0 && neighbors === 3) {\n                newRow.push(1); // Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction\n            } else {\n                newRow.push(grid[y][x]); // Nothing happens\n            }\n        }\n        newGrid.push(newRow);\n    }\n    // New grid for the next generation\n    grid = newGrid;\n    setTimeout(renderGrid, 200);\n}\n\n// Function to count the number of live neighbors for a given cell with wrapping\nfunction countNeighbors(x: number, y: number): number {\n    let count = 0;\n    for (let yOffset = -1; yOffset <= 1; yOffset++) {\n        for (let xOffset = -1; xOffset <= 1; xOffset++) {\n            if (xOffset === 0 && yOffset === 0) {\n                continue; // Skip the cell itself\n            }\n            const neighborX = (x + xOffset + grid[0].length) % grid[0].length;\n            const neighborY = (y + yOffset + grid.length) % grid.length;\n            count += grid[neighborY][neighborX];\n        }\n    }\n    return count;\n}\n\n// Function to render the grid on the WorkAdventure map\nfunction renderGrid(): void {\n    const tiles: TileDescriptor[] = [];\n    for (let y = 0; y < grid.length; y++) {\n        for (let x = 0; x < grid[0].length; x++) {\n            const tileId = grid[y][x] === 1 ? 'live-cell' : null;\n            tiles.push({ x, y, tile: tileId, layer: 'start' });\n        }\n    }\n    WA.room.setTiles(tiles);\n    applyRules();\n}\n\nexport {};\n"],"names":["grid","renderGrid","e","applyRules","newGrid","y","newRow","x","neighbors","countNeighbors","count","yOffset","xOffset","neighborX","neighborY","tiles","tileId"],"mappings":"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"}